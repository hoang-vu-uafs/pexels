{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["styled","div","img","App","state","photos","text","videos","getInputHandle","e","setState","target","value","searchHandle","axios","get","headers","Authorization","params","query","then","res","console","log","data","catch","err","searchVideoHandle","className","type","onChange","onClick","this","map","video","controls","key","id","width","height","src","video_files","link","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"qoBAKYA,IAAOC,IAAV,KAQSD,IAAOC,IAAV,KAIHD,IAAOE,IAAV,KAZT,IAmHeC,E,4MAjGbC,MAAQ,CAAEC,OAAQ,GAAIC,KAAM,GAAIC,OAAQ,I,EAwBxCC,eAAiB,SAACC,GAChB,EAAKC,SAAS,CACZJ,KAAMG,EAAEE,OAAOC,S,EAInBC,aAAe,WACbC,IACGC,IAAI,mCAAoC,CACvCC,QAAS,CACPC,cACE,4DAEJC,OAAQ,CACNC,MAAO,EAAKf,MAAME,QAGrBc,MAAK,SAACC,GACLC,QAAQC,IAAIF,EAAIG,KAAKnB,QACrB,EAAKK,SAAS,CACZL,OAAQgB,EAAIG,KAAKnB,YAGpBoB,OAAM,SAACC,GACNJ,QAAQC,IAAIG,O,EAIlBC,kBAAoB,WAClBb,IACGC,IAAI,uCAAwC,CAC3CC,QAAS,CACPC,cACE,4DAEJC,OAAQ,CACNC,MAAO,EAAKf,MAAME,QAGrBc,MAAK,SAACC,GACLC,QAAQC,IAAIF,EAAIG,KAAKjB,QACrB,EAAKG,SAAS,CACZH,OAAQc,EAAIG,KAAKjB,a,uDAKf,IAAD,OACP,OACE,yBAAKqB,UAAU,OACb,2BAAOC,KAAK,OAAOC,SAAU,SAACrB,GAAD,OAAO,EAAKD,eAAeC,MACxD,4BAAQsB,QAASC,KAAKL,mBAAtB,UAUCK,KAAK5B,MAAMG,OAAO0B,KAAI,SAACC,GACtB,OACE,2BAAOC,UAAQ,EAACC,IAAKF,EAAMG,GAAIC,MAAO,IAAKC,OAAQ,KACjD,4BAAQC,IAAKN,EAAMO,YAAY,GAAGC,gB,GAzF9BC,IAAMC,WCVJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBrC,MAAK,SAAAsC,GACJA,EAAaC,gBAEdlC,OAAM,SAAAmC,GACLtC,QAAQsC,MAAMA,EAAMC,c","file":"static/js/main.1f7bc1d8.chunk.js","sourcesContent":["import React from \"react\";\nimport axios from \"axios\";\nimport styled from \"styled-components\";\nimport \"./App.css\";\n\nconst Row = styled.div`\n  hight: 100%;\n  width: 100%;\n  margin: 10px;\n  display: flex;\n  flex-wrap: wrap;\n`;\n\nconst RowHeight = styled.div`\n  height: 40vh;\n`;\n\nconst Img = styled.img`\n  height: 70%;\n  margin: 10px;\n`;\n\nclass App extends React.Component {\n  state = { photos: [], text: \"\", videos: [] };\n\n  // componentDidMount() {\n  //   // axios\n  //   //   .get(\"https://api.pexels.com/v1/search\", {\n  //   //     headers: {\n  //   //       Authorization:\n  //   //         \"563492ad6f91700001000001c19522b6f6e14e76bee8c64b6e1dfd40\",\n  //   //     },\n  //   //     params: {\n  //   //       query: \"Tigers\",\n  //   //     },\n  //   //   })\n  //   //   .then((res) => {\n  //   //     console.log(res.data.photos);\n  //   //     this.setState({\n  //   //       photos: res.data.photos,\n  //   //     });\n  //   //   })\n  //   //   .catch((err) => {\n  //   //     console.log(err);\n  //   //   });\n  // }\n\n  getInputHandle = (e) => {\n    this.setState({\n      text: e.target.value,\n    });\n  };\n\n  searchHandle = () => {\n    axios\n      .get(\"https://api.pexels.com/v1/search\", {\n        headers: {\n          Authorization:\n            \"563492ad6f91700001000001c19522b6f6e14e76bee8c64b6e1dfd40\",\n        },\n        params: {\n          query: this.state.text,\n        },\n      })\n      .then((res) => {\n        console.log(res.data.photos);\n        this.setState({\n          photos: res.data.photos,\n        });\n      })\n      .catch((err) => {\n        console.log(err);\n      });\n  };\n\n  searchVideoHandle = () => {\n    axios\n      .get(\"https://api.pexels.com/videos/search\", {\n        headers: {\n          Authorization:\n            \"563492ad6f91700001000001c19522b6f6e14e76bee8c64b6e1dfd40\",\n        },\n        params: {\n          query: this.state.text,\n        },\n      })\n      .then((res) => {\n        console.log(res.data.videos);\n        this.setState({\n          videos: res.data.videos,\n        });\n      });\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <input type=\"text\" onChange={(e) => this.getInputHandle(e)} />\n        <button onClick={this.searchVideoHandle}>Search</button>\n        {/* <Row>\n          {this.state.photos.map((photo) => {\n            return (\n              <RowHeight key={photo.id}>\n                <Img src={photo.src.medium} alt={photo.id} />\n              </RowHeight>\n            );\n          })}\n        </Row> */}\n        {this.state.videos.map((video) => {\n          return (\n            <video controls key={video.id} width={320} height={240}>\n              <source src={video.video_files[0].link} />\n            </video>\n          );\n        })}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}